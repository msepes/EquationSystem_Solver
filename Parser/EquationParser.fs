// Implementation file for parser generated by fsyacc
module EquationParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "EquationParser.fsy"
   
open Mathe  
let gSi sign = match sign with | Mi ->  -1.0  | Pl ->  +1.0  
   

# 12 "EquationParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | COMMA
  | EOF
  | EQ
  | PL
  | MI
  | MU
  | FLOAT of (float)
  | VAR of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_EQ
    | TOKEN_PL
    | TOKEN_MI
    | TOKEN_MU
    | TOKEN_FLOAT
    | TOKEN_VAR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Equations
    | NONTERM_Equation
    | NONTERM_Terms
    | NONTERM_Term
    | NONTERM_sign

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | COMMA  -> 0 
  | EOF  -> 1 
  | EQ  -> 2 
  | PL  -> 3 
  | MI  -> 4 
  | MU  -> 5 
  | FLOAT _ -> 6 
  | VAR _ -> 7 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_COMMA 
  | 1 -> TOKEN_EOF 
  | 2 -> TOKEN_EQ 
  | 3 -> TOKEN_PL 
  | 4 -> TOKEN_MI 
  | 5 -> TOKEN_MU 
  | 6 -> TOKEN_FLOAT 
  | 7 -> TOKEN_VAR 
  | 10 -> TOKEN_end_of_input
  | 8 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Equations 
    | 3 -> NONTERM_Equations 
    | 4 -> NONTERM_Equations 
    | 5 -> NONTERM_Equation 
    | 6 -> NONTERM_Terms 
    | 7 -> NONTERM_Terms 
    | 8 -> NONTERM_Terms 
    | 9 -> NONTERM_Term 
    | 10 -> NONTERM_Term 
    | 11 -> NONTERM_Term 
    | 12 -> NONTERM_Term 
    | 13 -> NONTERM_Term 
    | 14 -> NONTERM_Term 
    | 15 -> NONTERM_sign 
    | 16 -> NONTERM_sign 
    | 17 -> NONTERM_sign 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 10 
let _fsyacc_tagOfErrorTerminal = 8

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | COMMA  -> "COMMA" 
  | EOF  -> "EOF" 
  | EQ  -> "EQ" 
  | PL  -> "PL" 
  | MI  -> "MI" 
  | MU  -> "MU" 
  | FLOAT _ -> "FLOAT" 
  | VAR _ -> "VAR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | COMMA  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | PL  -> (null : System.Object) 
  | MI  -> (null : System.Object) 
  | MU  -> (null : System.Object) 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 5us; 6us; 2us; 65535us; 0us; 4us; 5us; 4us; 4us; 65535us; 0us; 7us; 5us; 7us; 8us; 9us; 10us; 11us; 4us; 65535us; 0us; 10us; 5us; 10us; 8us; 10us; 10us; 10us; 4us; 65535us; 0us; 12us; 5us; 12us; 8us; 12us; 10us; 12us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 14us; 19us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 3us; 4us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 2us; 7us; 8us; 1us; 8us; 6us; 9us; 10us; 11us; 12us; 13us; 14us; 2us; 9us; 13us; 4us; 10us; 11us; 12us; 14us; 1us; 11us; 2us; 12us; 14us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 24us; 26us; 33us; 36us; 41us; 43us; 46us; 48us; 50us; 52us; 54us; 56us; |]
let _fsyacc_action_rows = 23
let _fsyacc_actionTableElements = [|5us; 16386us; 2us; 16390us; 3us; 21us; 4us; 22us; 6us; 16401us; 7us; 16401us; 0us; 49152us; 1us; 32768us; 1us; 3us; 0us; 16385us; 1us; 16387us; 0us; 5us; 5us; 16386us; 2us; 16390us; 3us; 21us; 4us; 22us; 6us; 16401us; 7us; 16401us; 0us; 16388us; 1us; 32768us; 2us; 8us; 4us; 16390us; 3us; 21us; 4us; 22us; 6us; 16401us; 7us; 16401us; 0us; 16389us; 4us; 16390us; 3us; 21us; 4us; 22us; 6us; 16401us; 7us; 16401us; 0us; 16392us; 2us; 32768us; 6us; 14us; 7us; 13us; 1us; 16393us; 5us; 18us; 2us; 16394us; 5us; 16us; 7us; 15us; 0us; 16395us; 2us; 32768us; 6us; 20us; 7us; 17us; 0us; 16396us; 1us; 32768us; 6us; 19us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 6us; 7us; 9us; 10us; 12us; 18us; 19us; 21us; 26us; 27us; 32us; 33us; 36us; 38us; 41us; 42us; 45us; 46us; 48us; 49us; 50us; 51us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 1us; 3us; 3us; 0us; 1us; 2us; 2us; 2us; 3us; 4us; 4us; 4us; 1us; 1us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 16388us; 65535us; 65535us; 16389us; 65535us; 16392us; 65535us; 65535us; 65535us; 16395us; 65535us; 16396us; 65535us; 16397us; 16398us; 16399us; 16400us; |]
let _fsyacc_reductions ()  =    [| 
# 132 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Mathe.Equations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 141 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "EquationParser.fsy"
                                            _1
                   )
# 18 "EquationParser.fsy"
                 : Mathe.Equations));
# 152 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "EquationParser.fsy"
                           []
                   )
# 21 "EquationParser.fsy"
                 : 'Equations));
# 162 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "EquationParser.fsy"
                                               [_1]   
                   )
# 22 "EquationParser.fsy"
                 : 'Equations));
# 173 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "EquationParser.fsy"
                                                     _1::_3 
                   )
# 23 "EquationParser.fsy"
                 : 'Equations));
# 185 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Terms)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Terms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "EquationParser.fsy"
                                          Equation(_1,_3)
                   )
# 26 "EquationParser.fsy"
                 : 'Equation));
# 197 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "EquationParser.fsy"
                          []
                   )
# 29 "EquationParser.fsy"
                 : 'Terms));
# 207 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "EquationParser.fsy"
                               [_1]
                   )
# 30 "EquationParser.fsy"
                 : 'Terms));
# 218 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Terms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "EquationParser.fsy"
                                     _1::_2
                   )
# 31 "EquationParser.fsy"
                 : 'Terms));
# 230 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sign)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "EquationParser.fsy"
                                               Var((gSi _1),_2) 
                   )
# 34 "EquationParser.fsy"
                 : 'Term));
# 242 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sign)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "EquationParser.fsy"
                                               Const( (gSi _1) * (_2))
                   )
# 35 "EquationParser.fsy"
                 : 'Term));
# 254 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sign)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "EquationParser.fsy"
                                               Var((gSi _1) * _2,_3) 
                   )
# 36 "EquationParser.fsy"
                 : 'Term));
# 267 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sign)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "EquationParser.fsy"
                                               Var((gSi _1) * _2,_4)
                   )
# 37 "EquationParser.fsy"
                 : 'Term));
# 280 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sign)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "EquationParser.fsy"
                                               Var((gSi _1) * _4,_2)
                   )
# 38 "EquationParser.fsy"
                 : 'Term));
# 293 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sign)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "EquationParser.fsy"
                                               Const( (gSi _1) * (_2*_4))
                   )
# 39 "EquationParser.fsy"
                 : 'Term));
# 306 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "EquationParser.fsy"
                             Pl
                   )
# 42 "EquationParser.fsy"
                 : 'sign));
# 316 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "EquationParser.fsy"
                             Mi
                   )
# 43 "EquationParser.fsy"
                 : 'sign));
# 326 "EquationParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "EquationParser.fsy"
                             Pl
                   )
# 44 "EquationParser.fsy"
                 : 'sign));
|]
# 337 "EquationParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 11;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Mathe.Equations =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
