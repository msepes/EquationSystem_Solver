{   
module EquationLexer
open System   
open EquationParser  
open FSharp.Text.Lexing
 
let ops =   
    [   
        "=",    EQ;   
        "+",    PL;   
        "-",    MI;   
        "*",    MU;   
    ] |> Map.ofList   

let lexeme = LexBuffer<_>.LexemeString
}   


let char        = ['a'-'z' 'A'-'Z']   
let string      = char+
let digit       = ['0'-'9']   
let frac        = '.' digit*
let exp         = ['e' 'E'] ['-' '+']? digit+
let float       = '-'? digit* frac? exp?
let whitespace  = [' ' '\t']   
let newline     = "\n\r" | '\n' | '\r'  
let operator    = '+' | '-' | '=' | '*'
let comma       = ','

rule tokenize = parse   
| whitespace    { tokenize lexbuf }   
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }   
| operator      { ops.[lexeme lexbuf] }   
| float         { FLOAT(Double.Parse(lexeme lexbuf)) }   
| string        { VAR(lexeme lexbuf) }   
| comma         { COMMA }   
| eof           { EOF }
| _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }
